// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        light_pos_radius_v4s: { value: [0.0, 0.0, 0.0, 0.0] }
        light_color_v4s: { value: [0.0, 0.0, 0.0, 0.0] }
        light_circle_v4s: { value: [0.0, 0.0, 0.0, 0.0] }
        light_box_v4s: { value: [0.0, 0.0, 0.0, 0.0] }
        light_polygon_v4s: { value: [0.0, 0.0, 0.0, 0.0] }
}%

CCProgram sprite-vs %{
	precision highp float;
	#include <cc-global>
	#if USE_LOCAL
		#include <cc-local>
	#endif
	in vec3 a_position;
	in vec2 a_texCoord;
	in vec4 a_color;

	out vec4 color;
	out vec2 uv0;

	vec4 vert () {
		vec4 pos = vec4(a_position, 1);

		#if USE_LOCAL
		pos = cc_matWorld * pos;
		#endif

		#if USE_PIXEL_ALIG4ME4T
		pos = cc_matView * pos;
		pos.xyz = floor(pos.xyz);
		pos = cc_matProj * pos;
		#else
		pos = cc_matViewProj * pos;
		#endif

		uv0 = a_texCoord;
		color = a_color;

		return pos;
	}
}%

CCProgram sprite-fs %{
	precision highp float;
	#include <embedded-alpha>
	#include <alpha-test>
	#include <cc-global>

	#include <mk_sdf_shadow_define>
	#include <mk_light>
	#include <mk_dist_field_func>
	#include <mk_dist_field_transform>

	in vec4 color;

	uniform ConstantsVec {
		// 光坐标 & 半径（xy：坐标，z：半径）
		vec4 light_pos_radius_v4s[max_light_length];
		// 光颜色
		vec4 light_color_v4s[max_light_length];
    // 圆（xy：坐标，z：半径）
		vec4 light_circle_v4s[max_circle_size];
    // 矩形（xy：坐标，zw：宽高）
		vec4 light_box_v4s[max_box_size];
		// 多边形数组
		vec4 light_polygon_v4s[all_polygon_pos_size];
	};
    vec2 polygon[max_polygon_pos_size];

	#if USE_TEXTURE
		in vec2 uv0;
		#pragma builtin(local)
		layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
	#endif

  // 距离场函数
  float scene_dist(vec2 render_v2) {
    float m = 9999.0;

    // 平滑合并
    float d = smooth_merge(sdf_circle(translate(render_v2, light_circle_v4s[0].xy), light_circle_v4s[0].z),
      sdf_circle(translate(render_v2, light_circle_v4s[1].xy), light_circle_v4s[1].z), 15.0);

    // 合并排除
    float d2 = merge_exclude(sdf_circle(translate(render_v2, light_circle_v4s[2].xy), light_circle_v4s[2].z),
      sdf_circle(translate(render_v2, light_circle_v4s[3].xy), light_circle_v4s[3].z));

    // 减去
    float d3 = substract(sdf_circle(translate(render_v2, light_circle_v4s[4].xy), light_circle_v4s[4].z),
      sdf_circle(translate(render_v2, light_circle_v4s[5].xy), light_circle_v4s[5].z));

      
    // 相加
    float d4 = intersect(sdf_circle(translate(render_v2, light_circle_v4s[6].xy), light_circle_v4s[6].z),
      sdf_circle(translate(render_v2, light_circle_v4s[7].xy), light_circle_v4s[7].z));
    
    m = merge(m, d);
    m = merge(m, d2);
    m = merge(m, d3);
    m = merge(m, d4);

    // 圆
    for (int k_i = 8; k_i < max_circle_size; ++k_i) {
      if (light_circle_v4s[k_i].x == -1.0) {
        break;
      }
      m = merge(m, sdf_circle(translate(render_v2, light_circle_v4s[k_i].xy), light_circle_v4s[k_i].z));
    }

    m = merge(m, sdf_box(
      rotate_ccw(translate(render_v2, light_box_v4s[0].xy), mod(cc_time.x, 3.1415)),
      light_box_v4s[0].zw
    ));

    // 绘制矩形
    for (int k_i = 1; k_i < max_box_size; ++k_i) {
      if (light_box_v4s[k_i].x == -1.0) {
        break;
      }
      m = merge(m, sdf_box(translate(render_v2, light_box_v4s[k_i].xy), light_box_v4s[k_i].zw));
    }

    // 绘制多边形
    // if (light_polygon_v4s[0].x != -1.0) {
      // 方案1
      // for (int k_i = 0; k_i < max_polygon_size; ++k_i) {
      //   for (int k2_i = 0; k2_i < max_polygon_pos_size; ++k2_i) {
      //     polygon[k2_i] = light_polygon_v4s[k_i * max_polygon_pos_size + k2_i].xy;
      //     if (polygon[k2_i].x == -1.0) {
      //       if (k2_i > 2) {
      //         m = merge(m, sdf_polygon(render_v2, polygon));
      //       }
      //       break;
      //     }
      //   }
      // }
    // }
    return m;
  }

  // 软阴影
	float shadow(vec2 render_v2_, vec2 light_v2_, float hard_f_) {
		// 当前渲染位置到光源位置的方向向量
		vec2 render_to_light_dir_v2 = normalize(light_v2_ - render_v2_);
		// 渲染位置至光源位置距离
		float render_to_light_dist_f = length(render_v2_ - light_v2_);
		// 可见光的一部分，从一个半径开始（最后添加下半部分）；
		float brightness_f = hard_f_ * render_to_light_dist_f;
		// 行走距离
		float travel_dist_f = 0.01;

		for (int k_i = 0; k_i < max_shadow_step; ++k_i) {				
		// 当前位置到场景的距离
			float dist_f = scene_dist(render_v2_ + render_to_light_dir_v2 * travel_dist_f);

			// 渲染点在物体内部
			if (dist_f < -hard_f_) {
				return 0.0;
			}
			 
			// dist_f 不变，brightness_f 越小，在越靠近光源和物体时 brightness_f 越小
			brightness_f = min(brightness_f, dist_f / travel_dist_f);

			// max 避免渲染点距离物理表面过近导致极小耗尽遍历次数，所以有可能会跳过物体距离小于1.0的阴影绘制
			// abs 避免朝回走
			travel_dist_f += max(1.0, abs(dist_f));

			// 渲染点的距离超过光源点
			if (travel_dist_f > render_to_light_dist_f) {
				break;
			}
		}

		// brightness_f * render_to_light_dist_f 根据距离平滑, 离光源越近越小，消除波纹线
		// 放大阴影，hard_f 越大结果越小则阴影越大, hard_f_ / (2.0 * hard_f_) 使结果趋近于0.5，用于平滑过渡
		brightness_f = clamp((brightness_f * render_to_light_dist_f + hard_f_) / (2.0 * hard_f_), 0.0, 1.0);
		brightness_f = smoothstep(0.0, 1.0, brightness_f);
		return brightness_f;
	}

  // 硬阴影
  float shadow3(vec2 render_v2_, vec2 light_v2_) {
		// 当前渲染位置到光源位置的方向向量
    vec2 render_to_light_dir_v2 = normalize(light_v2_ - render_v2_);
		// 渲染位置至光源位置距离
    float render_to_light_dist_f = length(render_v2_ - light_v2_);
		// 行走距离
    float travel_dist_f = 0.01;

    for (int k_i = 0; k_i < max_shadow_step; ++k_i) {				
      // 渲染点到场景的距离
      float dist_f = scene_dist(render_v2_ + render_to_light_dir_v2 * travel_dist_f);
      // 小于0表示在物体内部
      if (dist_f < 0.0) {
        return 0.0;
      }
      // abs：避免往回走
      // max 避免渲染点距离物理表面过近导致极小耗尽遍历次数，所以有可能会跳过物体距离小于1.0的阴影绘制
      travel_dist_f += max(1.0, abs(dist_f));
      // travel_dist_f += abs(dist_f); 精确的阴影

      // 渲染点的距离超过光源点
      if (travel_dist_f > render_to_light_dist_f) {
        return 1.0;
      }
    }
    return 0.0;
  }
	
  // 外发光
  vec4 outer_glow(float dist_f_, vec4 color_v4_, vec4 input_color_v4_, float radius_f_) {
    // dist_f_ > radius_f_ 结果为 0
    // dist_f_ < 0 结果为 1
    // dist_f_ > 0 && dist_f_ < radius_f_ 则 dist_f_ 越大 a_f 越小，范围 0 ~ 1
    float a_f = abs(clamp(dist_f_ / radius_f_, 0.0, 1.0) - 1.0);
    // pow：平滑 a_f
    // max and min：防止在物体内部渲染
    float b_f = min(max(0.0, dist_f_), pow(a_f, 5.0));
    return color_v4_ + input_color_v4_ * b_f;
  }
  
  // 内发光
  vec4 inner_glow(float dist_f_, vec4 color_v4_, vec4 input_color_v4_, float radius_f_) {
    // (dist_f_ + radius_f_) > radius_f_ 结果为1
    // (dist_f_ + radius_f_) < 0 结果为0
    // (dist_f_ + radius_f_) > 0 && (dist_f_ + radius_f_) < radius_f_ 则 dist_f_ 越大 a_f 越大，范围 0 ~ 1
    float a_f = clamp((dist_f_ + radius_f_) / radius_f_, 0.0, 1.0);
    // pow：平滑 a_f
    // 1.0+：在物体内渲染
    // max(1.0, sign(dist_f_) * -：dist_f_ < 0 时返回 -1，dist_f_ == 0 返回 0，dist_f_ > 0 返回 1，所以有效值只在物体内部
    float b_f = 1.0 - max(1.0, sign(dist_f_) * -(1.0 + pow(a_f, 5.0)));
		return color_v4_ + input_color_v4_ * b_f;
  }

	vec4 frag () {
		vec4 output_v4;
		// 渲染坐标
		vec2 render_v2 = gl_FragCoord.xy + vec2(0.5);
		// 屏幕中心坐标
		vec2 center_v2 = cc_screenSize.xy / 2.0;
		
		float dist_f = scene_dist(render_v2);
    
    // 背景颜色
    output_v4 = vec4(0.2, 0.2, 0.2, 1.0) * (1.0 - length(center_v2 - render_v2) / cc_screenSize.x);
    // 网格（0.9：网格颜色最低值， 1.0：最大值不超过原颜色）
    output_v4 *= clamp(min(mod(render_v2.y, 10.0), mod(render_v2.x, 10.0)), 0.9, 1.0);

		// 绘制光
    vec4 light_v4;
    float shadow_f;
		for (int k_i = 0; k_i < max_light_length; k_i++) {
			// 无法知道数组长度，所以最后位 x 传 -1
			if (light_pos_radius_v4s[k_i].x == -1.0) {
				break;
			}
			light_v4 = draw_light(render_v2, light_pos_radius_v4s[k_i].xy, light_pos_radius_v4s[k_i].z, light_color_v4s[k_i]);
			shadow_f = shadow(render_v2, light_pos_radius_v4s[k_i].xy, 10.0);
			// shadow_f = shadow3(render_v2, light_pos_radius_v4s[k_i].xy);
			output_v4 += light_v4 * shadow_f;
		}

    // 外发光 < 0 = 1, > 0 && < 范围 则 = smoothstep，否则 = 1
    // output_v4 *= outer_glow(dist_f, 50.0, 1.0);
    // 物体颜色
		output_v4 = mix(output_v4, vec4(1.0, 0.4, 0.0, 1.0), clamp(-dist_f, 0.0, 1.0));
    // 外发光
    // output_v4 = outer_glow(dist_f, output_v4, vec4(1.0, 1.0, 0.0, 1.0), 50.0);
    // 内发光
    output_v4 = inner_glow(dist_f, output_v4, vec4(0.0, 0.0, 0.0, 1.0), 50.0);
    // 物体描边
    // output_v4 = mix(output_v4, vec4(1.0, 1.0, 0.0, 1.0), abs(clamp(dist_f - 5.0, 0.0, 1.0) - clamp(dist_f, 0.0, 1.0)));

		// output_v4 *= color;
		// ALPHA_TEST(output_v4);
		return output_v4;
	}
}%
