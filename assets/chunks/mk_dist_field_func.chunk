// 有符号距离场函数
#include <mk_sdf_shadow_define>

// 圆
float sdf_circle(in vec2 render_v2_, in float radius_f_) {
	return length(render_v2_) - radius_f_;
}

// 矩形
float sdf_box(in vec2 render_v2_, in vec2 size_v2_) {
    vec2 dist_v2 = abs(render_v2_) - size_v2_;
    return length(max(dist_v2, 0.0)) + min(max(dist_v2.x, dist_v2.y),0.0);
}

// 多边形
float sdf_polygon(in vec2 render_v2_, in vec2[max_polygon_pos_size] polygon_pos_v2s_) {
    int end_index_i = max_polygon_pos_size;
    float d_f = dot(render_v2_ - polygon_pos_v2s_[0], render_v2_ - polygon_pos_v2s_[0]);
    float s_f = 1.0;
    vec2 temp_v2;
    for(int k_i = max_polygon_pos_size - 1; k_i != 0; k_i--) {
        if (polygon_pos_v2s_[k_i].x == -1.0) {
            temp_v2 = polygon_pos_v2s_[k_i - 1];
            end_index_i = k_i;
        }
    }
    for(int k_i = 0; k_i < max_polygon_pos_size; k_i++) {
        if (k_i == end_index_i) {
            break;
        }
        if (k_i != 0) {
            temp_v2 = polygon_pos_v2s_[k_i - 1];
        }
        // distance
        vec2 e_v2 = temp_v2 - polygon_pos_v2s_[k_i];
        vec2 w_v2 = render_v2_ - polygon_pos_v2s_[k_i];
        vec2 b_v2 = w_v2 - e_v2 * clamp(dot(w_v2, e_v2) / dot(e_v2, e_v2), 0.0, 1.0);
        d_f = min(d_f, dot(b_v2, b_v2));

        // winding number from http://geomalgorithms.com/a03-_inclusion.html
        bvec3 cond_bv3 = bvec3(render_v2_.y >= polygon_pos_v2s_[k_i].y, render_v2_.y < temp_v2.y, e_v2.x * w_v2.y > e_v2.y * w_v2.x);
        if (all(cond_bv3) || all(not(cond_bv3))) {
          s_f = -s_f;
        }
    }
    return s_f * sqrt(d_f);
}

// 多边形 2
float sdf_polygon2(in vec2 render_v2_, in vec2[max_polygon_pos_size] polygon_pos_v2s_) {
    int end_index_i = max_polygon_pos_size;
    float d_f = dot(render_v2_ - polygon_pos_v2s_[0], render_v2_ - polygon_pos_v2s_[0]);
    float s_f = 1.0;
    float result_f = 9999.0;
    vec2 temp_v2;
    for(int k_i = max_polygon_pos_size - 1; k_i != 0; --k_i) {
        if (polygon_pos_v2s_[k_i].x == -1.0) {
            temp_v2 = polygon_pos_v2s_[k_i - 1];
            end_index_i = k_i;
        }
    }
    for(int k_i = 0; k_i < max_polygon_pos_size; ++k_i) {
        if (k_i == end_index_i) {
            result_f = min(result_f, s_f * sqrt(d_f););
            d_f = dot(render_v2_ - polygon_pos_v2s_[0], render_v2_ - polygon_pos_v2s_[0]);
            s_f = 1.0;
            for(int k2_i = 0; k2_i < max_polygon_pos_size; ++k2_i) {
                if (polygon_pos_v2s_[k_i].x == -1.0) {
                    temp_v2 = polygon_pos_v2s_[k_i - 1];
                    end_index_i = k_i;
                }
            }
            continue;
        }
        if (k_i != 0) {
            temp_v2 = polygon_pos_v2s_[k_i - 1];
        }
        // distance
        vec2 e_v2 = temp_v2 - polygon_pos_v2s_[k_i];
        vec2 w_v2 = render_v2_ - polygon_pos_v2s_[k_i];
        vec2 b_v2 = w_v2 - e_v2 * clamp(dot(w_v2, e_v2) / dot(e_v2, e_v2), 0.0, 1.0);
        d_f = min(d_f, dot(b_v2, b_v2));

        // winding number from http://geomalgorithms.com/a03-_inclusion.html
        bvec3 cond_bv3 = bvec3(render_v2_.y >= polygon_pos_v2s_[k_i].y, render_v2_.y < temp_v2.y, e_v2.x * w_v2.y > e_v2.y * w_v2.x);
        if (all(cond_bv3) || all(not(cond_bv3))) {
          s_f = -s_f;
        }
    }
    return result_f;
}