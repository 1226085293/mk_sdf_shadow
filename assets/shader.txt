float smoothMerge(float d1, float d2, float k)
{
    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);
    return mix(d2, d1, h) - k * h * (1.0-h);
}


float merge(float d1, float d2)
{
	return min(d1, d2);
}


float mergeExclude(float d1, float d2)
{
	return min(max(-d1, d2), max(-d2, d1));
}


float substract(float d1, float d2)
{
	return max(-d1, d2);
}


float intersect(float d1, float d2)
{
	return max(d1, d2);
}


//////////////////////////////
// Rotation and translation //
//////////////////////////////


vec2 rotateCCW(vec2 p, float a)
{
	mat2 m = mat2(cos(a), sin(a), -sin(a), cos(a));
	return p * m;	
}


vec2 rotateCW(vec2 p, float a)
{
	mat2 m = mat2(cos(a), -sin(a), sin(a), cos(a));
	return p * m;
}


vec2 translate(vec2 p, vec2 t)
{
	return p - t;
}


//////////////////////////////
// 距离场函数 //
//////////////////////////////


float pie(vec2 p, float angle)
{
	angle = radians(angle) / 2.0;
	vec2 n = vec2(cos(angle), sin(angle));
	return abs(p).x * n.x + p.y*n.y;
}


float circleDist(vec2 p, float radius)
{
	return length(p) - radius;
}


float triangleDist(vec2 p, float radius)
{
	return max(	abs(p).x * 0.866025 + 
			   	p.y * 0.5, -p.y) 
				-radius * 0.5;
}


float triangleDist(vec2 p, float width, float height)
{
	vec2 n = normalize(vec2(height, width / 2.0));
	return max(	abs(p).x*n.x + p.y*n.y - (height*n.y), -p.y);
}


float semiCircleDist(vec2 p, float radius, float angle, float width)
{
	width /= 2.0;
	radius -= width;
	return substract(pie(p, angle), 
					 abs(circleDist(p, radius)) - width);
}


float boxDist(vec2 p, vec2 size, float radius)
{
	size -= vec2(radius);
	vec2 d = abs(p) - size;
  	return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;
}


float lineDist(vec2 p, vec2 start, vec2 end, float width)
{
	vec2 dir = start - end;
	float lngth = length(dir);
	dir /= lngth;
	vec2 proj = max(0.0, min(lngth, dot((start - p), dir))) * dir;
	return length( (start - p) - proj ) - (width / 2.0);
}


///////////////////////
// Masks for drawing //
///////////////////////


float fillMask(float dist)
{
	return clamp(-dist, 0.0, 1.0);
}


float innerBorderMask(float dist, float width)
{
	//dist += 1.0;
	float alpha1 = clamp(dist + width, 0.0, 1.0);
	float alpha2 = clamp(dist, 0.0, 1.0);
	return alpha1 - alpha2;
}


float outerBorderMask(float dist, float width)
{
	//dist += 1.0;
	float alpha1 = clamp(dist, 0.0, 1.0);
	float alpha2 = clamp(dist - width, 0.0, 1.0);
	return alpha1 - alpha2;
}


///////////////
// The scene //
///////////////


float sceneDist(vec2 p)
{
	float c = circleDist(		translate(p, vec2(100, 250)), 40.0);
	float b1 =  boxDist(		translate(p, vec2(200, 250)), vec2(40, 40), 	0.0);
	float b2 =  boxDist(		translate(p, vec2(300, 250)), vec2(40, 40), 	10.0);
	float l = lineDist(			p, 			 vec2(370, 220),  vec2(430, 280),	10.0);
	float t1 = triangleDist(	translate(p, vec2(500, 210)), 80.0, 			80.0);
	float t2 = triangleDist(	rotateCW(translate(p, vec2(600, 250)), iTime), 40.0);
	
	float m = 	merge(c, b1);
	m = 		merge(m, b2);
	m = 		merge(m, l);
	m = 		merge(m, t1);
	m = 		merge(m, t2);
	
	float b3 = boxDist(		translate(p, vec2(100, sin(iTime * 3.0 + 1.0) * 40.0 + 100.0)), 
					   		vec2(40, 15), 	0.0);
	float c2 = circleDist(	translate(p, vec2(100, 100)),	30.0);
	float s = substract(b3, c2);
	
	float b4 = boxDist(		translate(p, vec2(200, sin(iTime * 3.0 + 2.0) * 40.0 + 100.0)), 
					   		vec2(40, 15), 	0.0);
	float c3 = circleDist(	translate(p, vec2(200, 100)), 	30.0);
	float i = intersect(b4, c3);
	
	float b5 = boxDist(		translate(p, vec2(300, sin(iTime * 3.0 + 3.0) * 40.0 + 100.0)), 
					   		vec2(40, 15), 	0.0);
	float c4 = circleDist(	translate(p, vec2(300, 100)), 	30.0);
	float a = merge(b5, c4);
	
	float b6 = boxDist(		translate(p, vec2(400, 100)),	vec2(40, 15), 	0.0);
	float c5 = circleDist(	translate(p, vec2(400, 100)), 	30.0);
	float sm = smoothMerge(b6, c5, 10.0);
	
	float sc = semiCircleDist(translate(p, vec2(500,100)), 40.0, 90.0, 10.0);
    
    float b7 = boxDist(		translate(p, vec2(600, sin(iTime * 3.0 + 3.0) * 40.0 + 100.0)), 
					   		vec2(40, 15), 	0.0);
	float c6 = circleDist(	translate(p, vec2(600, 100)), 	30.0);
	float e = mergeExclude(b7, c6);
    
	m = merge(m, s);
	m = merge(m, i);
	m = merge(m, a);
	m = merge(m, sm);
	m = merge(m, sc);
    m = merge(m, e);
	return m;
}


float sceneSmooth(vec2 p, float r)
{
	float accum = sceneDist(p);
	accum += sceneDist(p + vec2(0.0, r));
	accum += sceneDist(p + vec2(0.0, -r));
	accum += sceneDist(p + vec2(r, 0.0));
	accum += sceneDist(p + vec2(-r, 0.0));
	return accum / 5.0;
}


//////////////////////
// 阴影和光 //
//////////////////////

// 阴影
float shadow(vec2 p, vec2 pos, float radius)
{
	// 当前渲染位置到光源位置的方向向量
	vec2 dir = normalize(pos - p);
	// 渲染位置至光源位置距离
	float dl = length(p - pos);
	
	// 可见光的一部分，从一个半径开始（最后添加下半部分）；
	float lf = radius * dl;
	
	// 行驶距离
	float dt = 0.01;

	for (int i = 0; i < 64; ++i)
	{				
		// 当前位置到场景的距离
		float sd = sceneDist(p + dir * dt);

        // 当这条光线保证是全阴影时，早点出来
        if (sd < -radius) 
            return 0.0;
        
		// 光照下的锥体重叠宽度
		// 0 在中心，所以 50% 重叠：在循环外添加一个半径以获得总覆盖率
		// 应该是 '(sd / dt) * dl'，但 '*dl' 在循环之外
		lf = min(lf, sd / dt);
		
		// 向前进
		dt += max(1.0, abs(sd));
		if (dt > dl) break;
	}

	// 乘以 dl 以获得真实的投影重叠（移出循环）
	// 在 -radius 和 + radius 之间添加一个半径
	// 归一化为 1 (/ 2 * radius)
	lf = clamp((lf*dl + radius) / (2.0 * radius), 0.0, 1.0);
	lf = smoothstep(0.0, 1.0, lf);
	return lf;
}
// 测试阴影
float shadow2(vec2 p, vec2 pos, float radius)
{
	// 当前渲染位置到光源位置的方向向量
	vec2 dir = normalize(pos - p);
	// 渲染位置至光源位置距离
	float dl = length(p - pos);
	
	// 可见光的一部分，从一个半径开始（最后添加下半部分）；
	float lf = radius * dl;
	// 
	float dt = 0.01;

	for (int i = 0; i < 128; ++i)
	{				
		// 渲染点到场景的距离
		float sd = sceneDist(p + dir * dt);
		if (sd < -radius) {
			return 0.0;
		}
		// sd 递减，lf 越小，sd 递增，lf 不变，所以在越靠近物体时 lf 越小
		lf = min(lf, sd / dt);
		// max 避免渲染点距离物理表面过近导致极小耗尽遍历次数， abs 避免朝回走，所以有可能会跳过物体距离小于1.0的阴影绘制
		dt += max(abs(sd), 1.0);
		// 渲染点的距离超过光源点
		if (dt > dl) {
			break;
		}
	}
    
	// 消除波纹线
	// lf*dl 根据距离平滑, 离光源越近越小
    //lf = clamp((lf * dl / radius), 0.0, 1.0);
    
    // 放大阴影，radius 越大结果越小则阴影越大, radius / (2.0 * radius) 使结果趋近于0.5，用于平滑过渡
	lf = clamp((lf*dl + radius) / (2.0 * radius), 0.0, 1.0);
    
    // 
	lf = smoothstep(0.0, 1.0, lf);
	return lf;
}

// 硬阴影
float shadow3(vec2 p, vec2 pos, float radius)
{
	// 当前渲染位置到光源位置的方向向量
	vec2 dir = normalize(pos - p);
	// 渲染位置至光源位置距离
	float dl = length(pos - p);
	// 
	float dt = 0.0;

	for (int i = 0; i < 64; ++i)
	{				
		// 渲染点到场景的距离
		float sd = sceneDist(p + dir * dt);
		// 小于0表示在物体内部
		if (sd < 0.0) {
			return 0.0;
		}
		// abs：避免往回走
		dt += abs(sd);
		// 渲染点的距离超过光源点
		if (dt > dl) {
			return 1.0;
        }
		
	}

	return 0.0;
}

// 软阴影
float shadow4(vec2 p, vec2 pos, float radius)
{
	// 当前渲染位置到光源位置的方向向量
	vec2 dir = normalize(pos - p);
	// 渲染位置至光源位置距离
	float dl = length(pos - p);
	// 
	float dt = 0.0;

    float safe_dist_f = sceneDist(p);
    float safe_dist_dt_f = 0.0;
	for (int i = 0; i < 64; ++i)
	{				
		// 渲染点到场景的距离
		float sd = sceneDist(p + dir * dt);
        if (sd < safe_dist_f) {
            safe_dist_f = sd;
            safe_dist_dt_f = dt;
        }
		// 小于0表示在物体内部
		if (sd < 0.0) {
			return 0.0;
		}
		// abs：避免往回走
		dt += abs(sd);
		// 渲染点的距离超过光源点
		if (dt > dl) {
            return smoothstep(0.0, 1.0, 8.0 * safe_dist_f / safe_dist_dt_f);
        }
		
	}
	return 0.0;
}

// 光
vec4 drawLight(vec2 p, vec2 pos, vec4 color, float dist, float range, float radius)
{
	// distance to light
	float ld = length(p - pos);
	
	// out of range
	if (ld > range) return vec4(0.0);
	
	// 阴影
	float shad = shadow2(p, pos, radius);
	// 光衰减
	float fall = 1.0 - ld / range;
	fall *= fall;
	// 中心圆
	float source = fillMask(circleDist(p - pos, radius));
	return (shad * fall + source) * color;
}

// 高清电视显示亮度
float luminance(vec4 col)
{
	return 0.2126 * col.r + 0.7152 * col.g + 0.0722 * col.b;
}

// 设置亮度
void setLuminance(inout vec4 col, float lum)
{
	lum /= luminance(col);
	col *= lum;
}


float AO(vec2 p, float dist, float radius, float intensity)
{
	float a = clamp(dist / radius, 0.0, 1.0) - 1.0;
	return 1.0 - (pow(abs(a), 5.0) + 1.0) * intensity + (1.0 - intensity);
	return smoothstep(0.0, 1.0, dist / radius);
}


/////////////////
// The program //
/////////////////


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	// 整数 gl_FragCoord
	vec2 p = fragCoord.xy + vec2(0.5);
	// 屏幕中心坐标
	vec2 c = iResolution.xy / 2.0;
	
	// float dist = sceneSmooth(p, 5.0);
	float dist = sceneDist(p);
	
	// 光坐标
	vec2 light1Pos = iMouse.xy;
	// 光颜色
	vec4 light1Col = vec4(0.75, 1.0, 0.5, 1.0);
	// 光亮度
	setLuminance(light1Col, 0.5);
	
	// 光2坐标
	vec2 light2Pos = vec2(iResolution.x * (sin(iTime + 3.1415) + 1.2) / 2.4, 175.0);
	// 光2颜色
	vec4 light2Col = vec4(1.0, 0.75, 0.5, 1.0);
	// 光2亮度
	setLuminance(light2Col, 0.5);
	
	// 光3坐标
	vec2 light3Pos = vec2(iResolution.x * (sin(iTime) + 1.2) / 2.4, 340.0);
	// 光3颜色
	vec4 light3Col = vec4(0.5, 0.75, 1.0, 1.0);
	// 光3亮度
	// setLuminance(light3Col, 0.6);
	
	// 背景颜色（距离中心点越远则越黑）
	//vec4 col = vec4(0.5, 0.5, 0.5, 1.0);
	vec4 col = vec4(0.5, 0.5, 0.5, 1.0) * (1.0 - length(c - p) / iResolution.x);
	// 网格（0.9：网格颜色最低值， 1.0：最大值不超过原颜色）
	col *= clamp(min(mod(p.y, 10.0), mod(p.x, 10.0)), 0.9, 1.0);
	
	// 绘制光
	col += drawLight(p, light1Pos, light1Col, dist, 500.0, 5.0);
	//col += drawLight(p, light2Pos, light2Col, dist, 200.0, 8.0);
	//col += drawLight(p, light3Pos, light3Col, dist, 300.0, 12.0);
	
	// 环境光和外发光
	col *= AO(p, sceneSmooth(p, 10.0), 40.0, 0.4);
	//col *= 1.0-AO(p, sceneDist(p), 40.0, 1.0);
	// 填充物体颜色
	col = mix(col, vec4(1.0, 0.4, 0.0, 1.0), fillMask(dist));
	
	// 物体轮廓
	col = mix(col, vec4(0.1, 0.1, 0.1, 1.0), innerBorderMask(dist, 1.5));
     

	fragColor = clamp(col, 0.0, 1.0);

}